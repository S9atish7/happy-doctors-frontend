{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pagad\\\\Desktop\\\\happy-doctors\\\\frontend\\\\src\\\\components\\\\Payment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport qrCodeImage from \"../assets/qr.jpg\";\nimport \"./Payment.css\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { database, ref, query, orderByChild, equalTo, get } from \"../firebase\"; // Use your existing Firebase config\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Payment = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [transactionId, setTransactionId] = useState(\"\");\n  const [paymentStatus, setPaymentStatus] = useState(null);\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const handleVerifyPayment = async () => {\n    if (!transactionId.trim()) {\n      setErrorMessage(\"Please enter a valid transaction ID.\");\n      return;\n    }\n    setIsVerifying(true);\n    setErrorMessage(\"\");\n    try {\n      // 1. Query Firebase for the transaction ID\n      const paymentsRef = ref(database, \"payments\");\n      const transactionQuery = query(paymentsRef, orderByChild(\"transactionId\"), equalTo(transactionId));\n      const snapshot = await get(transactionQuery);\n\n      // 2. Check if transaction exists and is completed\n      if (snapshot.exists()) {\n        const paymentData = Object.values(snapshot.val())[0];\n        if (paymentData.status === \"completed\") {\n          var _location$state;\n          setPaymentStatus(\"success\");\n\n          // 3. Get form data (from location state or localStorage)\n          const formData = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.formData) || JSON.parse(localStorage.getItem(\"healthCardFormData\"));\n\n          // 4. Add transaction ID to form data\n          const cardData = {\n            ...formData,\n            transactionId: transactionId\n          };\n\n          // 5. Redirect to next page\n          navigate(\"/generate-card\", {\n            state: {\n              formData: cardData\n            }\n          });\n        } else {\n          setPaymentStatus(\"failed\");\n          setErrorMessage(\"Payment not completed yet.\");\n        }\n      } else {\n        setPaymentStatus(\"failed\");\n        setErrorMessage(\"Transaction ID not found.\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setPaymentStatus(\"failed\");\n      setErrorMessage(\"Error verifying payment. Please try again.\");\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  // (Optional) Simulate a test payment (for development)\n  const simulatePayment = async () => {\n    setIsVerifying(true);\n    setErrorMessage(\"\");\n    try {\n      // Generate a random transaction ID (for testing)\n      const simulatedTransactionId = `TXN${Math.floor(Math.random() * 1000000)}`;\n      setTransactionId(simulatedTransactionId);\n\n      // (Optional) Auto-verify after setting the ID\n      await handleVerifyPayment();\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setErrorMessage(\"Simulation failed.\");\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Scan & Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Scan the QR code below to complete the payment.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: qrCodeImage,\n      alt: \"UPI QR Code\",\n      className: \"qr-code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enter Transaction ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter UPI Transaction ID\",\n        value: transactionId,\n        onChange: e => setTransactionId(e.target.value),\n        disabled: isVerifying\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVerifyPayment,\n        className: \"verify-button\",\n        disabled: isVerifying,\n        children: isVerifying ? \"Verifying...\" : \"Verify Payment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: simulatePayment,\n        className: \"simulate-button\",\n        disabled: isVerifying,\n        children: isVerifying ? \"Processing...\" : \"Simulate Payment (Test)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-msg\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 26\n      }, this), paymentStatus === \"success\" && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"success-msg\",\n        children: \"\\u2705 Payment Successful! Redirecting...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(Payment, \"Yy0faNNWN4jr4vZWa/8v6CT0EHo=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useState","qrCodeImage","useNavigate","useLocation","database","ref","query","orderByChild","equalTo","get","jsxDEV","_jsxDEV","Payment","_s","navigate","location","transactionId","setTransactionId","paymentStatus","setPaymentStatus","isVerifying","setIsVerifying","errorMessage","setErrorMessage","handleVerifyPayment","trim","paymentsRef","transactionQuery","snapshot","exists","paymentData","Object","values","val","status","_location$state","formData","state","JSON","parse","localStorage","getItem","cardData","error","console","simulatePayment","simulatedTransactionId","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","type","placeholder","value","onChange","e","target","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/pagad/Desktop/happy-doctors/frontend/src/components/Payment.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport qrCodeImage from \"../assets/qr.jpg\";\r\nimport \"./Payment.css\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { database, ref, query, orderByChild, equalTo, get } from \"../firebase\"; // Use your existing Firebase config\r\n\r\nconst Payment = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [transactionId, setTransactionId] = useState(\"\");\r\n  const [paymentStatus, setPaymentStatus] = useState(null);\r\n  const [isVerifying, setIsVerifying] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const handleVerifyPayment = async () => {\r\n    if (!transactionId.trim()) {\r\n      setErrorMessage(\"Please enter a valid transaction ID.\");\r\n      return;\r\n    }\r\n\r\n    setIsVerifying(true);\r\n    setErrorMessage(\"\");\r\n\r\n    try {\r\n      // 1. Query Firebase for the transaction ID\r\n      const paymentsRef = ref(database, \"payments\");\r\n      const transactionQuery = query(\r\n        paymentsRef,\r\n        orderByChild(\"transactionId\"),\r\n        equalTo(transactionId)\r\n      );\r\n\r\n      const snapshot = await get(transactionQuery);\r\n\r\n      // 2. Check if transaction exists and is completed\r\n      if (snapshot.exists()) {\r\n        const paymentData = Object.values(snapshot.val())[0];\r\n        \r\n        if (paymentData.status === \"completed\") {\r\n          setPaymentStatus(\"success\");\r\n          \r\n          // 3. Get form data (from location state or localStorage)\r\n          const formData = location.state?.formData || \r\n                   JSON.parse(localStorage.getItem(\"healthCardFormData\"));\r\n          \r\n          // 4. Add transaction ID to form data\r\n          const cardData = {\r\n            ...formData,\r\n            transactionId: transactionId\r\n          };\r\n          \r\n          // 5. Redirect to next page\r\n          navigate(\"/generate-card\", { state: { formData: cardData } });\r\n        } else {\r\n          setPaymentStatus(\"failed\");\r\n          setErrorMessage(\"Payment not completed yet.\");\r\n        }\r\n      } else {\r\n        setPaymentStatus(\"failed\");\r\n        setErrorMessage(\"Transaction ID not found.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setPaymentStatus(\"failed\");\r\n      setErrorMessage(\"Error verifying payment. Please try again.\");\r\n    } finally {\r\n      setIsVerifying(false);\r\n    }\r\n  };\r\n\r\n  // (Optional) Simulate a test payment (for development)\r\n  const simulatePayment = async () => {\r\n    setIsVerifying(true);\r\n    setErrorMessage(\"\");\r\n    \r\n    try {\r\n      // Generate a random transaction ID (for testing)\r\n      const simulatedTransactionId = `TXN${Math.floor(Math.random() * 1000000)}`;\r\n      setTransactionId(simulatedTransactionId);\r\n      \r\n      // (Optional) Auto-verify after setting the ID\r\n      await handleVerifyPayment();\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setErrorMessage(\"Simulation failed.\");\r\n    } finally {\r\n      setIsVerifying(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"payment-container\">\r\n      <h2>Scan & Pay</h2>\r\n      <p>Scan the QR code below to complete the payment.</p>\r\n\r\n      <img src={qrCodeImage} alt=\"UPI QR Code\" className=\"qr-code\" />\r\n\r\n      <div className=\"input-section\">\r\n        <label>Enter Transaction ID:</label>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter UPI Transaction ID\"\r\n          value={transactionId}\r\n          onChange={(e) => setTransactionId(e.target.value)}\r\n          disabled={isVerifying}\r\n        />\r\n        \r\n        <button \r\n          onClick={handleVerifyPayment} \r\n          className=\"verify-button\"\r\n          disabled={isVerifying}\r\n        >\r\n          {isVerifying ? \"Verifying...\" : \"Verify Payment\"}\r\n        </button>\r\n\r\n        {/* (Optional) For testing only */}\r\n        <button \r\n          onClick={simulatePayment} \r\n          className=\"simulate-button\"\r\n          disabled={isVerifying}\r\n        >\r\n          {isVerifying ? \"Processing...\" : \"Simulate Payment (Test)\"}\r\n        </button>\r\n        \r\n        {errorMessage && <p className=\"error-msg\">{errorMessage}</p>}\r\n        \r\n        {paymentStatus === \"success\" && (\r\n          <p className=\"success-msg\">✅ Payment Successful! Redirecting...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payment;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
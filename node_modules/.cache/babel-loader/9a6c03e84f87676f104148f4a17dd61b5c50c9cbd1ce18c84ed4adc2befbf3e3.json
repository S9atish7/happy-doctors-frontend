{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pagad\\\\Desktop\\\\happy-doctors\\\\frontend\\\\src\\\\components\\\\Payment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Payment.css\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { database, ref, set } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Payment = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [paymentStatus, setPaymentStatus] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const handleRazorpayPayment = async () => {\n    const amount = 1; // Rs.1 (minimum test amount)\n    try {\n      var _data$error;\n      const res = await fetch(\"http://localhost:5000/create-order\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          amount\n        })\n      });\n      const data = await res.json();\n      if (!data.success) throw new Error(((_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) || \"Failed to create Razorpay order\");\n      const options = {\n        key: \"rzp_test_DYU4rGUFm5V5Zf\",\n        amount: data.order.amount,\n        currency: \"INR\",\n        name: \"Your Company Name\",\n        description: \"Test Payment\",\n        order_id: data.order.id,\n        handler: async function (response) {\n          var _location$state;\n          const transactionId = response.razorpay_payment_id;\n\n          // Save to Firebase\n          const paymentRef = ref(database, `payments/${transactionId}`);\n          await set(paymentRef, {\n            transactionId,\n            status: \"completed\",\n            amount,\n            time: new Date().toISOString()\n          });\n          setPaymentStatus(\"success\");\n\n          // Get form data from location state or localStorage\n          const formData = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.formData) || JSON.parse(localStorage.getItem(\"healthCardFormData\"));\n\n          // Prepare card data with transaction ID\n          const cardData = {\n            ...formData,\n            transactionId,\n            paymentStatus: \"completed\",\n            paymentDate: new Date().toISOString()\n          };\n\n          // Navigate to generate-card with all data\n          navigate(\"/generate-card\", {\n            state: {\n              formData: cardData,\n              paymentDetails: {\n                transactionId,\n                amount,\n                status: \"completed\"\n              }\n            }\n          });\n        },\n        prefill: {\n          name: \"Test User\",\n          email: \"test@example.com\",\n          contact: \"9999999999\"\n        },\n        theme: {\n          color: \"#4CAF50\"\n        }\n      };\n      const rzp = new window.Razorpay(options);\n      rzp.on('payment.failed', response => {\n        setErrorMessage(`Payment failed: ${response.error.description}`);\n      });\n      rzp.open();\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(err.message || \"Payment initiation failed\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Test Payment (\\u20B91)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRazorpayPayment,\n      className: \"verify-button\",\n      children: \"Pay with Razorpay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-msg\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 24\n    }, this), paymentStatus === \"success\" && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-msg\",\n      children: \"\\u2705 Payment Successful! Redirecting...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Payment, \"Q2/IbcplyRqSn2KK13WaUZpwn9o=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","database","ref","set","jsxDEV","_jsxDEV","Payment","_s","navigate","location","paymentStatus","setPaymentStatus","errorMessage","setErrorMessage","handleRazorpayPayment","amount","_data$error","res","fetch","method","headers","body","JSON","stringify","data","json","success","Error","error","message","options","key","order","currency","name","description","order_id","id","handler","response","_location$state","transactionId","razorpay_payment_id","paymentRef","status","time","Date","toISOString","formData","state","parse","localStorage","getItem","cardData","paymentDate","paymentDetails","prefill","email","contact","theme","color","rzp","window","Razorpay","on","open","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/pagad/Desktop/happy-doctors/frontend/src/components/Payment.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Payment.css\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { database, ref, set } from \"../firebase\";\r\n\r\nconst Payment = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [paymentStatus, setPaymentStatus] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const handleRazorpayPayment = async () => {\r\n    const amount = 1; // Rs.1 (minimum test amount)\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/create-order\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ amount }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      if (!data.success) throw new Error(data.error?.message || \"Failed to create Razorpay order\");\r\n\r\n      const options = {\r\n        key: \"rzp_test_DYU4rGUFm5V5Zf\",\r\n        amount: data.order.amount,\r\n        currency: \"INR\",\r\n        name: \"Your Company Name\",\r\n        description: \"Test Payment\",\r\n        order_id: data.order.id,\r\n        handler: async function (response) {\r\n          const transactionId = response.razorpay_payment_id;\r\n\r\n          // Save to Firebase\r\n          const paymentRef = ref(database, `payments/${transactionId}`);\r\n          await set(paymentRef, {\r\n            transactionId,\r\n            status: \"completed\",\r\n            amount,\r\n            time: new Date().toISOString()\r\n          });\r\n\r\n          setPaymentStatus(\"success\");\r\n\r\n          // Get form data from location state or localStorage\r\n          const formData = location.state?.formData || \r\n                          JSON.parse(localStorage.getItem(\"healthCardFormData\"));\r\n\r\n          // Prepare card data with transaction ID\r\n          const cardData = {\r\n            ...formData,\r\n            transactionId,\r\n            paymentStatus: \"completed\",\r\n            paymentDate: new Date().toISOString()\r\n          };\r\n\r\n          // Navigate to generate-card with all data\r\n          navigate(\"/generate-card\", { \r\n            state: { \r\n              formData: cardData,\r\n              paymentDetails: {\r\n                transactionId,\r\n                amount,\r\n                status: \"completed\"\r\n              }\r\n            } \r\n          });\r\n        },\r\n        prefill: {\r\n          name: \"Test User\",\r\n          email: \"test@example.com\",\r\n          contact: \"9999999999\"\r\n        },\r\n        theme: {\r\n          color: \"#4CAF50\"\r\n        }\r\n      };\r\n\r\n      const rzp = new window.Razorpay(options);\r\n      rzp.on('payment.failed', (response) => {\r\n        setErrorMessage(`Payment failed: ${response.error.description}`);\r\n      });\r\n      rzp.open();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setErrorMessage(err.message || \"Payment initiation failed\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"payment-container\">\r\n      <h2>Test Payment (₹1)</h2>\r\n      <button onClick={handleRazorpayPayment} className=\"verify-button\">\r\n        Pay with Razorpay\r\n      </button>\r\n      {errorMessage && <p className=\"error-msg\">{errorMessage}</p>}\r\n      {paymentStatus === \"success\" && (\r\n        <p className=\"success-msg\">✅ Payment Successful! Redirecting...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payment;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
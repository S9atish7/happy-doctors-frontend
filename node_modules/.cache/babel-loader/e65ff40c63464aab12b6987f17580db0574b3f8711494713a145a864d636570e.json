{"ast":null,"code":"import React,{useState}from\"react\";import\"./Payment.css\";import{useNavigate,useLocation}from\"react-router-dom\";import{database,ref,set}from\"../firebase\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Payment=()=>{const navigate=useNavigate();const location=useLocation();const[paymentStatus,setPaymentStatus]=useState(null);const[errorMessage,setErrorMessage]=useState(\"\");const handleRazorpayPayment=async()=>{const amount=1;// Rs.1 (minimum test amount)\ntry{var _data$error;const res=await fetch(\"http://localhost:5000/create-order\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({amount})});const data=await res.json();if(!data.success)throw new Error(((_data$error=data.error)===null||_data$error===void 0?void 0:_data$error.message)||\"Failed to create Razorpay order\");const options={key:\"rzp_test_DYU4rGUFm5V5Zf\",amount:data.order.amount,currency:\"INR\",name:\"Your Company Name\",description:\"Test Payment\",order_id:data.order.id,handler:async function(response){var _location$state;const transactionId=response.razorpay_payment_id;// Save to Firebase\nconst paymentRef=ref(database,`payments/${transactionId}`);await set(paymentRef,{transactionId,status:\"completed\",amount,time:new Date().toISOString()});setPaymentStatus(\"success\");// Get form data from location state or localStorage\nconst formData=((_location$state=location.state)===null||_location$state===void 0?void 0:_location$state.formData)||JSON.parse(localStorage.getItem(\"healthCardFormData\"));// Prepare card data with transaction ID\nconst cardData={...formData,transactionId,paymentStatus:\"completed\",paymentDate:new Date().toISOString()};// Navigate to generate-card with all data\nnavigate(\"/generate-card\",{state:{formData:cardData,paymentDetails:{transactionId,amount,status:\"completed\"}}});},prefill:{name:\"Test User\",email:\"test@example.com\",contact:\"9999999999\"},theme:{color:\"#4CAF50\"}};const rzp=new window.Razorpay(options);rzp.on('payment.failed',response=>{setErrorMessage(`Payment failed: ${response.error.description}`);});rzp.open();}catch(err){console.error(err);setErrorMessage(err.message||\"Payment initiation failed\");}};return/*#__PURE__*/_jsxs(\"div\",{className:\"payment-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Test Payment (\\u20B91)\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleRazorpayPayment,className:\"verify-button\",children:\"Pay with Razorpay\"}),errorMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"error-msg\",children:errorMessage}),paymentStatus===\"success\"&&/*#__PURE__*/_jsx(\"p\",{className:\"success-msg\",children:\"\\u2705 Payment Successful! Redirecting...\"})]});};export default Payment;","map":{"version":3,"names":["React","useState","useNavigate","useLocation","database","ref","set","jsx","_jsx","jsxs","_jsxs","Payment","navigate","location","paymentStatus","setPaymentStatus","errorMessage","setErrorMessage","handleRazorpayPayment","amount","_data$error","res","fetch","method","headers","body","JSON","stringify","data","json","success","Error","error","message","options","key","order","currency","name","description","order_id","id","handler","response","_location$state","transactionId","razorpay_payment_id","paymentRef","status","time","Date","toISOString","formData","state","parse","localStorage","getItem","cardData","paymentDate","paymentDetails","prefill","email","contact","theme","color","rzp","window","Razorpay","on","open","err","console","className","children","onClick"],"sources":["C:/Users/pagad/Desktop/happy-doctors/frontend/src/components/Payment.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Payment.css\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { database, ref, set } from \"../firebase\";\r\n\r\nconst Payment = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [paymentStatus, setPaymentStatus] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const handleRazorpayPayment = async () => {\r\n    const amount = 1; // Rs.1 (minimum test amount)\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/create-order\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ amount }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      if (!data.success) throw new Error(data.error?.message || \"Failed to create Razorpay order\");\r\n\r\n      const options = {\r\n        key: \"rzp_test_DYU4rGUFm5V5Zf\",\r\n        amount: data.order.amount,\r\n        currency: \"INR\",\r\n        name: \"Your Company Name\",\r\n        description: \"Test Payment\",\r\n        order_id: data.order.id,\r\n        handler: async function (response) {\r\n          const transactionId = response.razorpay_payment_id;\r\n\r\n          // Save to Firebase\r\n          const paymentRef = ref(database, `payments/${transactionId}`);\r\n          await set(paymentRef, {\r\n            transactionId,\r\n            status: \"completed\",\r\n            amount,\r\n            time: new Date().toISOString()\r\n          });\r\n\r\n          setPaymentStatus(\"success\");\r\n\r\n          // Get form data from location state or localStorage\r\n          const formData = location.state?.formData || \r\n                          JSON.parse(localStorage.getItem(\"healthCardFormData\"));\r\n\r\n          // Prepare card data with transaction ID\r\n          const cardData = {\r\n            ...formData,\r\n            transactionId,\r\n            paymentStatus: \"completed\",\r\n            paymentDate: new Date().toISOString()\r\n          };\r\n\r\n          // Navigate to generate-card with all data\r\n          navigate(\"/generate-card\", { \r\n            state: { \r\n              formData: cardData,\r\n              paymentDetails: {\r\n                transactionId,\r\n                amount,\r\n                status: \"completed\"\r\n              }\r\n            } \r\n          });\r\n        },\r\n        prefill: {\r\n          name: \"Test User\",\r\n          email: \"test@example.com\",\r\n          contact: \"9999999999\"\r\n        },\r\n        theme: {\r\n          color: \"#4CAF50\"\r\n        }\r\n      };\r\n\r\n      const rzp = new window.Razorpay(options);\r\n      rzp.on('payment.failed', (response) => {\r\n        setErrorMessage(`Payment failed: ${response.error.description}`);\r\n      });\r\n      rzp.open();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setErrorMessage(err.message || \"Payment initiation failed\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"payment-container\">\r\n      <h2>Test Payment (₹1)</h2>\r\n      <button onClick={handleRazorpayPayment} className=\"verify-button\">\r\n        Pay with Razorpay\r\n      </button>\r\n      {errorMessage && <p className=\"error-msg\">{errorMessage}</p>}\r\n      {paymentStatus === \"success\" && (\r\n        <p className=\"success-msg\">✅ Payment Successful! Redirecting...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payment;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}